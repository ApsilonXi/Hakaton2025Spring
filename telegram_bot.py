import logging
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import (
    Application,
    CommandHandler,
    CallbackQueryHandler,
    MessageHandler,
    ContextTypes,
    filters
)

import datetime
from db_methods import *

CONFIG = {
    'token': '7530398431:AAFnSCkcu4_XaeRJ7Cz3_RRZ2O-wfYERous',
    'base_url': 'https://–≤–∞—à-—Å–∞–π—Ç.ru',
    'channel_id': '@factosphera_bot'
}

# "–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö" –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π

db = NewsDB()
user_db = db.all_users()



class UserState:
    def __init__(self):
        self.id = None
        self.token = None
        self.is_authenticated = False
        self.subscription = 0


async def start(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start"""
    user_id = update.effective_user.id
    user_state = UserState()

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
    for user in user_db:
        if user['telegram_id'] == user_id:  # –ü—Ä–æ–≤–µ—Ä—è–µ–º telegram id (4-–π —ç–ª–µ–º–µ–Ω—Ç –≤ —Å–ø–∏—Å–∫–µ)
            user_state.id = user['id']
            user_state.token = user['user_login'].strip()  # –õ–æ–≥–∏–Ω (—É–¥–∞–ª—è–µ–º –ª–∏—à–Ω–∏–µ –ø—Ä–æ–±–µ–ª—ã)
            user_state.is_authenticated = True
            user_state.subscription = int(user['telegram_id'].strip())
            break

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ
    context.user_data['user_state'] = user_state

    if user_state.is_authenticated:
        await show_authenticated_menu(update, user_state)
    else:
        await show_unauthenticated_menu(update)


async def show_unauthenticated_menu(update: Update) -> None:
    """–ú–µ–Ω—é –¥–ª—è –Ω–µ–∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"""
    keyboard = [
        [
            InlineKeyboardButton("üîó –°–≤—è–∑–∞—Ç—å —Å –∞–∫–∫–∞—É–Ω—Ç–æ–º", callback_data='link_account'),
            InlineKeyboardButton("üì∞ –ü–æ—Å–ª–µ–¥–Ω–∏–µ –Ω–æ–≤–æ—Å—Ç–∏", callback_data='get_news'),
        ]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)

    await update.message.reply_text(
        "üëã –§–∞–∫—Ç–æ—Å—Ñ–µ—Ä–∞ –Ω–∞ —Å–≤—è–∑–∏!\n\n"
        "–°–≤–µ–∂–∏–µ –Ω–æ–≤–æ—Å—Ç–∏ –Ω–∞—É–∫–∏, —Å –Ω–∞—à–µ–≥–æ —Å–∞–π—Ç–∞, —Ç–µ–ø–µ—Ä—å —É –≤–∞—Å —á–∞—Ç–µ. "
        "–î–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ –ø–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–º –ø–æ–¥–ø–∏—Å–∫–∞–º, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–≤—è–∂–∏—Ç–µ –±–æ—Ç–∞ —Å –≤–∞—à–∏–º –∞–∫–∫–∞—É–Ω—Ç–æ–º.",
        reply_markup=reply_markup
    )


async def show_authenticated_menu(update: Update, user_state: UserState, special_mode=None) -> None:
    """–ú–µ–Ω—é –¥–ª—è –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"""
    if user_state.subscription != 0:
        keyboard = [
            [
                InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É", callback_data='unsubscribe'),
                InlineKeyboardButton("üì∞ –ü–æ—Å–ª–µ–¥–Ω–∏–µ –Ω–æ–≤–æ—Å—Ç–∏", callback_data='get_news'),
            ]
        ]
    else:
        keyboard = [
            [
                InlineKeyboardButton("‚ö° –ë—ã—Å—Ç—Ä–∞—è –ø–æ–¥–ø–∏—Å–∫–∞", callback_data='fast_sub'),
                InlineKeyboardButton("üìÖ –ï–∂–µ–¥–Ω–µ–≤–Ω–∞—è —Å–≤–æ–¥–∫–∞", callback_data='daily_digest'),
            ],
        ]

    reply_markup = InlineKeyboardMarkup(keyboard)

    if special_mode == 'authorized':
        await update.message.reply_text(
            "üëã –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ!\n\n"
            "–í—ã –º–æ–∂–µ—Ç–µ –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å –ø–æ–ª—É—á–µ–Ω–∏–µ –Ω–æ–≤–æ—Å—Ç–µ–π –ø–æ –≤–∞—à–µ–º—É –≤–∫—É—Å—É.",
            reply_markup=reply_markup
        )
    elif user_state.subscription == 0:
        await update.message.reply_text(
            "üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å!\n\n"
            "–í—ã –º–æ–∂–µ—Ç–µ –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å –ø–æ–ª—É—á–µ–Ω–∏–µ –Ω–æ–≤–æ—Å—Ç–µ–π –ø–æ –≤–∞—à–µ–º—É –≤–∫—É—Å—É.\n\n"
            "–ë—ã—Å—Ç—Ä–∞—è –ø–æ–¥–ø–∏—Å–∫–∞ –ø–æ–∑–≤–æ–ª–∏—Ç –ø–æ–ª—É—á–∞—Ç—å –∞–∫—Ç—É–∞–ª—å–Ω—ã–µ –Ω–æ–≤–æ—Å—Ç–∏ –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω–æ —Å –ø—É–±–ª–∏–∫–∞—Ü–∏–µ–π –Ω–∞ –Ω–∞—à–µ–º —Å–∞–π—Ç–µ.\n"
            "–ï–∂–µ–¥–Ω–µ–≤–Ω–∞—è —Å–≤–æ–¥–∫–∞, —Å—Ñ–æ—Ä–º–∏—Ä—É–µ—Ç —É—Ç—Ä–µ–Ω–Ω–∏–µ –ø–æ–¥–±–æ—Ä–∫–∏ –∞–∫—Ç—É–∞–ª—å–Ω—ã—Ö –Ω–æ–≤–æ—Å—Ç–µ–π –Ω–∞ –æ—Å–Ω–æ–≤–µ –≤–∞—à–∏—Ö –ø–æ–¥–ø–∏—Å–æ–∫.",
            reply_markup=reply_markup
        )
    else:
        await update.message.reply_text(
            "üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å!\n\n"
            "–ñ–µ–ª–∞–µ—Ç–µ –ø–æ–ª—É—á–∏—Ç—å —Å–≤–æ–¥–∫—É –∞–∫—Ç—É–∞–ª—å–Ω—ã—Ö –Ω–æ–≤–æ—Å—Ç–µ–π –∏–ª–∏ –æ—Ç–º–µ–Ω–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É –Ω–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è?",
            reply_markup=reply_markup
        )


async def button_handler(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–æ–∫"""
    query = update.callback_query
    await query.answer()

    user_state = context.user_data['user_state']

    if query.data == 'link_account':
        await query.edit_message_text(
            text="üîë –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à —É–Ω–∏–∫–∞–ª—å–Ω—ã–π —Ç–æ–∫–µ–Ω, –∫–æ—Ç–æ—Ä—ã–π –≤—ã –º–æ–∂–µ—Ç–µ –ø–æ–ª—É—á–∏—Ç—å –≤ –ª–∏—á–Ω–æ–º –∫–∞–±–∏–Ω–µ—Ç–µ –Ω–∞ –Ω–∞—à–µ–º —Å–∞–π—Ç–µ."
        )
        context.user_data['expecting_token'] = True
    elif query.data == 'get_news':
        await get_latest_news(update, context, user_state)
    elif query.data == 'fast_sub':
        user_state.subscription = 1
        context.user_data['user_state'] = user_state
        db.update_subscribe(user_state.id, '1')
        await show_authenticated_menu_from_query(update, user_state, "subscribe")
    elif query.data == 'daily_digest':
        user_state.subscription = 2
        context.user_data['user_state'] = user_state
        db.update_subscribe(user_state.id, '2')
        await show_authenticated_menu_from_query(update, user_state, "subscribe")
    elif query.data == 'unsubscribe':
        user_state.subscription = 0
        user_state.is_authenticated = False
        db.update_user_telegram_id(user_state.id, 1000000000)
        db.update_subscribe(user_state.id, "0")
        context.user_data['user_state'] = user_state
        await show_unauthenticated_menu_from_query(update)
    elif query.data == 'menu':
        if user_state.is_authenticated:
            await show_authenticated_menu_from_query(update, user_state)
        else:
            await show_unauthenticated_menu_from_query(update)


async def show_authenticated_menu_from_query(update: Update, user_state: UserState, special_mode=None) -> None:
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –º–µ–Ω—é –¥–ª—è –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏–∑ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞ –∫–Ω–æ–ø–æ–∫"""
    query = update.callback_query

    if user_state.subscription != 0:
        keyboard = [
            [
                InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É", callback_data='unsubscribe'),
                InlineKeyboardButton("üì∞ –ü–æ—Å–ª–µ–¥–Ω–∏–µ –Ω–æ–≤–æ—Å—Ç–∏", callback_data='get_news'),
            ]
        ]
    else:
        keyboard = [
            [
                InlineKeyboardButton("‚ö° –ë—ã—Å—Ç—Ä–∞—è –ø–æ–¥–ø–∏—Å–∫–∞", callback_data='fast_sub'),
                InlineKeyboardButton("üìÖ –ï–∂–µ–¥–Ω–µ–≤–Ω–∞—è —Å–≤–æ–¥–∫–∞", callback_data='daily_digest'),
            ],
        ]

    reply_markup = InlineKeyboardMarkup(keyboard)

    if special_mode == "subscribe":
        await query.edit_message_text(
            text="üëã –ü–æ–¥–ø–∏—Å–∫–∞ —É—Å–ø–µ—à–Ω–æ –ø—Ä–∏–º–µ–Ω–µ–Ω–∞!\n\n"
                 "–ù–æ–≤—ã–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è —Å–∫–æ—Ä–æ –ø–æ—Å—Ç—É–ø—è—Ç",
            reply_markup=reply_markup
        )
    else:
        await query.edit_message_text(
            text="üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å!\n\n"
                 "–í—ã –º–æ–∂–µ—Ç–µ –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å –ø–æ–ª—É—á–µ–Ω–∏–µ –Ω–æ–≤–æ—Å—Ç–µ–π –ø–æ –≤–∞—à–µ–º—É –≤–∫—É—Å—É.",
            reply_markup=reply_markup
        )


async def show_unauthenticated_menu_from_query(update: Update) -> None:
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –º–µ–Ω—é –¥–ª—è –Ω–µ–∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏–∑ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞ –∫–Ω–æ–ø–æ–∫"""
    query = update.callback_query
    keyboard = [
        [
            InlineKeyboardButton("üîó –°–≤—è–∑–∞—Ç—å —Å –∞–∫–∫–∞—É–Ω—Ç–æ–º", callback_data='link_account'),
            InlineKeyboardButton("üì∞ –ü–æ—Å–ª–µ–¥–Ω–∏–µ –Ω–æ–≤–æ—Å—Ç–∏", callback_data='get_news'),
        ]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)

    await query.edit_message_text(
        text="üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –Ω–æ–≤–æ—Å—Ç–Ω–æ–π –±–æ—Ç!\n\n"
             "–ó–¥–µ—Å—å –≤—ã –º–æ–∂–µ—Ç–µ –ø–æ–ª—É—á–∞—Ç—å —Å–≤–µ–∂–∏–µ –Ω–æ–≤–æ—Å—Ç–∏ —Å –Ω–∞—à–µ–≥–æ —Å–∞–π—Ç–∞. "
             "–î–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ –ø–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–º –ø–æ–¥–ø–∏—Å–∫–∞–º, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–≤—è–∂–∏—Ç–µ –±–æ—Ç–∞ —Å –≤–∞—à–∏–º –∞–∫–∫–∞—É–Ω—Ç–æ–º.",
        reply_markup=reply_markup
    )


async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π (–ø—Ä–∏–≤—è–∑–∫–∞ –∞–∫–∫–∞—É–Ω—Ç–∞ –ø–æ –∫–ª—é—á—É)"""
    user_id = update.effective_user.id
    user_state = context.user_data['user_state']

    # –ï—Å–ª–∏ –±–æ—Ç –æ–∂–∏–¥–∞–µ—Ç —Ç–æ–∫–µ–Ω
    if context.user_data.get('expecting_token', False):
        input_token = update.message.text.strip()  # –£–¥–∞–ª—è–µ–º –ø—Ä–æ–±–µ–ª—ã

        # –ò—â–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –±–∞–∑–µ –ø–æ –∫–ª—é—á—É (—Ñ–æ—Ä–º–∞—Ç: user_id + user_login)
        user_found = None
        for user in user_db:
            expected_token = f"{user['id']}{user['user_login'].strip()}"  # user_id + login
            if input_token == expected_token:
                user_found = user
                break

        # –ï—Å–ª–∏ –∫–ª—é—á –≤–µ—Ä–Ω—ã–π
        if user_found:
            # –û–±–Ω–æ–≤–ª—è–µ–º telegram_id –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
            db.update_user_telegram_id(user_found[0], user_id)

            # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            user_state.token = user_id
            user_state.id = user_found[0]
            user_state.is_authenticated = True
            context.user_data['user_state'] = user_state  # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è
            await show_authenticated_menu(update, user_state, 'authorized')
        else:
            await update.message.reply_text(
                "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –∫–ª—é—á. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å –≤–≤–æ–¥–∞ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É.",
                reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("üìã –ú–µ–Ω—é", callback_data="menu")]])
            )

        context.user_data['expecting_token'] = False  # –°–±—Ä–∞—Å—ã–≤–∞–µ–º –æ–∂–∏–¥–∞–Ω–∏–µ —Ç–æ–∫–µ–Ω–∞

    else:
        await update.message.reply_text(
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –º–µ–Ω—é –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏.",
            reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("üìã –ú–µ–Ω—é", callback_data="menu")]])
        )


async def get_latest_news(update: Update, context: ContextTypes.DEFAULT_TYPE, user_state: UserState) -> None:
    """–ü–æ–ª—É—á–∞–µ—Ç –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –ø–æ—Å–ª–µ–¥–Ω–∏–µ –Ω–æ–≤–æ—Å—Ç–∏"""
    query = update.callback_query
    news_list = db.get_published_news()
    cut_list = news_list[:10]

    news = ''

    for count, item in enumerate(cut_list):
        news += f'{count + 1}. {item['title']}\n{item['link']}\n\n'

    keyboard = [
        [InlineKeyboardButton("üìã –ú–µ–Ω—é", callback_data='menu')]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)

    if query:
        await query.edit_message_text(
            text=f"üì∞ –ü–æ—Å–ª–µ–¥–Ω–∏–µ –Ω–æ–≤–æ—Å—Ç–∏:\n\n{news}\n\n–ß—Ç–æ –¥–∞–ª—å—à–µ?",
            reply_markup=reply_markup
        )
    else:
        await update.message.reply_text(
            text=f"üì∞ –ü–æ—Å–ª–µ–¥–Ω–∏–µ –Ω–æ–≤–æ—Å—Ç–∏:\n\n{news}\n\n–ß—Ç–æ –¥–∞–ª—å—à–µ?",
            reply_markup=reply_markup
        )


async def fetch_news_from_api(news: List[dict], user_id: int = None) -> str:
    """–ü–æ–ª—É—á–∞–µ—Ç –Ω–æ–≤–æ—Å—Ç–∏ —Å API (–∑–∞–≥–ª—É—à–∫–∞)"""
    if user_id:
        user_tags = db.get_by_user_id(user_id)
        print(f"–¢–µ–≥–∏ —é–∑–µ—Ä–æ–≤ {user_tags}")

    return '–ó–¥–µ—Å—å –±—É–¥—É—Ç –≤–∞—à–∏ –Ω–æ–≤–æ—Å—Ç–∏! –ö–∞–∫ —Ç–æ–ª—å–∫–æ –æ–Ω–∏ –ø–æ—è–≤—è—Ç—Å—è...'


async def daily_digest(context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –µ–∂–µ–¥–Ω–µ–≤–Ω—É—é —Å–≤–æ–¥–∫—É"""

    users = db.all_users()
    news = db.get_published_news()
    print(news)
    print(users)

    for user in users:
        if user[2].strip() == '2' and user[3] != 1000000000:
            try:
                news = await fetch_news_from_api(news, user[0])
                await context.bot.send_message(
                    chat_id=user[3],
                    text=f"üåÖ –î–æ–±—Ä–æ–µ —É—Ç—Ä–æ! –í–∞—à–∞ –µ–∂–µ–¥–Ω–µ–≤–Ω–∞—è —Å–≤–æ–¥–∫–∞:\n\n{news}",
                    reply_markup=InlineKeyboardMarkup([
                        [InlineKeyboardButton("üìã –ú–µ–Ω—é", callback_data="menu")]
                    ])
                )
            except Exception as e:
                logging.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –¥–∞–π–¥–∂–µ—Å—Ç–∞ –¥–ª—è {user[0]}: {e}")


async def error_handler(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫"""
    logging.error("Exception while handling an update:", exc_info=context.error)

    if update and update.effective_message:
        await update.effective_message.reply_text("üòï –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")


def main() -> None:
    """–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞"""
    logging.basicConfig(
        level=logging.INFO,
        format="%(asctime)s - %(name)s - %(levelname)s - %(message)s",
    )
    # –£–º–µ–Ω—å—à–∞–µ–º –ª–æ–≥–∏ httpx
    logging.getLogger("httpx").setLevel(logging.WARNING)

    application = Application.builder().token(CONFIG['token']).build()

    job_queue = application.job_queue

    '''application.job_queue.run_once(
        daily_digest,
        when=10,
        chat_id=1333624885  # –£–∫–∞–∂–∏—Ç–µ —Ä–µ–∞–ª—å–Ω—ã–π chat_id
    )'''

    # –¢–µ–ø–µ—Ä—å –º–æ–∂–Ω–æ –Ω–∞—Å—Ç—Ä–∞–∏–≤–∞—Ç—å –∑–∞–¥–∞—á–∏
    job_queue.run_daily(
        daily_digest,
        time=datetime.time(hour=11, minute=0),
        days=(0, 1, 2, 3, 4, 5, 6)
    )

    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥
    application.add_handler(CommandHandler("start", start))

    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–Ω–æ–ø–æ–∫
    application.add_handler(CallbackQueryHandler(button_handler))

    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
    application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message))

    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫
    application.add_error_handler(error_handler)

    # –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
    application.run_polling()


if __name__ == '__main__':
    main()
