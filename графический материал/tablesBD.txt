

-- Create tables
CREATE TABLE users (
    id SERIAL PRIMARY KEY,
    user_login CHAR(20) NOT NULL UNIQUE,
    user_password CHAR(20) NOT NULL,
    user_role CHAR(15) NOT NULL,
    notification CHAR(20) default '0',
    tag_subscription INTEGER,
    sources_subsc INTEGER
);

CREATE TABLE sources (
    id SERIAL PRIMARY KEY,
    name CHAR(20) NOT NULL,
    link TEXT not null
);

CREATE TABLE tags (
    id SERIAL PRIMARY KEY,
    name CHAR(20) NOT NULL
);

CREATE TABLE news (
    id SERIAL PRIMARY KEY,
    type_news BOOLEAN default TRUE,
    title TEXT not null,
    content TEXT not null,
    status BOOLEAN default FALSE,
    tag integer,
    source INTEGER,
    FOREIGN KEY (source) REFERENCES sources(id) ON DELETE SET NULL,
	FOREIGN KEY (tag) REFERENCES tags(id) ON DELETE SET NULL
);

CREATE TABLE tags_news (
    id SERIAL PRIMARY KEY,
    tagID INTEGER NOT NULL,
    newsID INTEGER NOT NULL,
    FOREIGN KEY (tagID) REFERENCES tags(id) ON DELETE CASCADE,
    FOREIGN KEY (newsID) REFERENCES news(id) ON DELETE CASCADE,
    UNIQUE (tagID, newsID)
);

CREATE TABLE folders (
    id SERIAL PRIMARY KEY,
    userLOG CHAR(20) NOT NULL,
    name CHAR(20),
    newsID INTEGER,
    FOREIGN KEY (userLOG) REFERENCES users(user_login) ON DELETE CASCADE,
    FOREIGN KEY (newsID) REFERENCES news(id) ON DELETE SET NULL
);

-- Таблица предложений от пользователей
CREATE TABLE offers (
    id SERIAL PRIMARY KEY,
    user_id INTEGER NOT NULL REFERENCES users(id) ON DELETE CASCADE,
    link TEXT NOT NULL
);

-- Таблица подписок пользователей на теги
CREATE TABLE user_tag_subscriptions (
    user_id INTEGER NOT NULL REFERENCES users(id) ON DELETE CASCADE,
    tag_id INTEGER NOT NULL REFERENCES tags(id) ON DELETE CASCADE,
    PRIMARY KEY (user_id, tag_id)
);

-- Таблица подписок пользователей на источники
CREATE TABLE user_source_subscriptions (
    user_id INTEGER NOT NULL REFERENCES users(id) ON DELETE CASCADE,
    source_id INTEGER NOT NULL REFERENCES sources(id) ON DELETE CASCADE,
    PRIMARY KEY (user_id, source_id)
);